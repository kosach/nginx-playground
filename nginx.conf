user www-data;

#set nombers of processes 1 proces - 1 core
worker_processes auto;
pid /run/nginx.pid;

# include /etc/nginx/modules-enabled/*.conf;
load_module modules/ngx_http_js_module.so;

events {
    # worker_processes * worker_connections = max connections
    worker_connections 1024;
}

http {
    
    include mime.types;
    js_include oauth2.js; # Location of JavaScript code
    server {
        listen 80;

        root /sites/demo;
        ##############try_files#############
        # its try sites/demo/$uri then sites/demo/cat.png and at the end sites/demo/greet-try-files and at the end go to the named location @freandly_404
        try_files $uri /cat.png /greet-try-files @freandly_404;

        location @freandly_404 {
            return 404 "Sorry thats file could not be find";
        }
        
        location /greet-try-files {
            return 200 "Hello User _try_files";
        }
        ############## Revers Proxy with jwt validation ##############
        location /api/v1/ {
            auth_request /_oauth2_token_introspection;                              
            # proxy_pass 'http://main-geatway-test:3000/';
        }

        location = /_oauth2_token_introspection {
            internal;
            js_content introspectAccessToken; 
        }

        location /_oauth2_send_request {
            internal;
            proxy_method      POST;
            proxy_set_header  Authorization 'Bearer $http_Authorization';
            proxy_set_header  Content-Type "application/x-www-form-urlencoded";
            proxy_set_body    "token=$http_Authorization";
            # proxy_pass        http://main-geatway-test:3000/validate-token;
        }
        ##############access_log##############

        #added logs to secure path
        location /secure {
            access_log /var/log/nginx/secure.access.log;
            return 200 "Welcome to secure!";
        }
        #disable logs to corrent path
        location /disabled-logs {
            access_log off;
            return 200 "Welcome to secure!";
        }
        ############## Matches ##############
        # Match order
        # 1. Exact match
        # 2. Preferential Prefix match
        # 3. REGEXP match
        # 4. Prefix match

        #prefix match
        location /greet {
            return 200 'Hello from nginx greet "/greet"';
        } 
        #preferential prefix match
        location ^~ /greet4 {
            return 200 'Hello from nginx greet "/greet"';
        }        
        #exact match
        location = /greet2 {
            return 200 'Hello from nginx greet "/greet2"';
        }        
        #REGEXP match
        location ~ /greet[3-5] {
            return 200 'Hello from nginx greet "/greet[3-5]"';
        }

        #use global  variables
        location /inspect {
            return 200 "$host\n$uri\n$arg_name";
        }
        ############## Variables ############## 
        #set variable and use it in if statment
        set $userName 'Andrii';
        if ($arg_name = $userName) {
            return 200 "Hello Andrii";
        }        
        if ($arg_name ~ 'Vika|Vita') {
            return 200 "Hello sisters";
        }
        ############## Riderects and rewrite ##############
        #The return statement as we've been using it takes a status code and 'return 200 "Hello Andrii"'
        # But in the case of that response code being a 300 variant which is four redirects the return directives 'return 307 /some/path'

        location /logo {
            return 307 thumb.png;
        }

        rewrite ^/user/\w+ /greet;
        # rewrite ^/user/\w+ /greet last; - skeep other rewrights

        rewrite ^/user/(\w+) /greet/$1;

        location = /greet/jon {
            return 200 'Hello from nginx greet "/greet/john"';
        }
    }
}
